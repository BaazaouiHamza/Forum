// Code generated by sqlc. DO NOT EDIT.
// source: post.sql

package db

import (
	"context"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  creator, 
  title,
  description,
  image
) VALUES (
  $1, $2,$3,$4
) RETURNING id, creator, title, description, image, vote_count, created_at
`

type CreatePostParams struct {
	Creator     string `json:"creator"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Image       string `json:"image"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Creator,
		arg.Title,
		arg.Description,
		arg.Image,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Creator,
		&i.Title,
		&i.Description,
		&i.Image,
		&i.VoteCount,
		&i.CreatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, creator, title, description, image, vote_count, created_at FROM posts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Creator,
		&i.Title,
		&i.Description,
		&i.Image,
		&i.VoteCount,
		&i.CreatedAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, creator, title, description, image, vote_count, created_at FROM posts
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Creator,
			&i.Title,
			&i.Description,
			&i.Image,
			&i.VoteCount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts 
SET title = $2,description=$3,image=$4
WHERE id = $1
RETURNING id, creator, title, description, image, vote_count, created_at
`

type UpdatePostParams struct {
	ID          int64  `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Image       string `json:"image"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Image,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Creator,
		&i.Title,
		&i.Description,
		&i.Image,
		&i.VoteCount,
		&i.CreatedAt,
	)
	return i, err
}
